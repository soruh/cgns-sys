/* automatically generated by rust-bindgen */

pub const CGNS_VERSION: u32 = 3400;
pub const CGNS_DOTVERS: f64 = 3.4;
pub const CGNS_COMPATVERSION: u32 = 2540;
pub const CGNS_COMPATDOTVERS: f64 = 2.54;
pub const CG_BUILD_LEGACY: u32 = 0;
pub const CG_BUILD_64BIT: u32 = 0;
pub const CG_BUILD_SCOPE: u32 = 0;
pub const CG_BUILD_BASESCOPE: u32 = 0;
pub const CG_MAX_INT32: u32 = 2147483647;
pub const CG_HAVE_STAT64_STRUCT: u32 = 0;
pub const CG_SIZEOF_SIZE: u32 = 32;
pub const CG_SIZE_DATATYPE: &'static [u8; 3usize] = b"I4\0";
pub const FORTRAN_DEFAULT_INTEGER_C_INT64_T: u32 = 0;

pub const CG_MODE_READ: CG_MODE = 0;
pub const CG_MODE_WRITE: CG_MODE = 1;
pub const CG_MODE_MODIFY: CG_MODE = 2;
pub const CG_MODE_CLOSED: CG_MODE = 3;
pub type CG_MODE = u32; // custom

pub const CG_FILE_NONE: CG_FILE = 0;
pub const CG_FILE_ADF: CG_FILE = 1;
pub const CG_FILE_HDF5: CG_FILE = 2;
pub const CG_FILE_ADF2: CG_FILE = 3;
pub type CG_FILE = u32; // custom

pub const CG_OK: u32 = 0;
pub const CG_ERROR: u32 = 1;
pub const CG_NODE_NOT_FOUND: u32 = 2;
pub const CG_INCORRECT_PATH: u32 = 3;
pub const CG_NO_INDEX_DIM: u32 = 4;
pub const CG_Null: u32 = 0;
pub const CG_UserDefined: u32 = 1;
pub const CG_MAX_GOTO_DEPTH: u32 = 20;
pub const CG_CONFIG_ERROR: u32 = 1;
pub const CG_CONFIG_COMPRESS: u32 = 2;
pub const CG_CONFIG_SET_PATH: u32 = 3;
pub const CG_CONFIG_ADD_PATH: u32 = 4;
pub const CG_CONFIG_FILE_TYPE: u32 = 5;
pub const CG_CONFIG_RIND_INDEX: u32 = 6;
pub const CG_CONFIG_HDF5_COMPRESS: u32 = 201;
pub const CG_CONFIG_HDF5_MPI_COMM: u32 = 202;
pub const NofValidMassUnits: u32 = 6;
pub const NofValidLengthUnits: u32 = 7;
pub const NofValidTimeUnits: u32 = 3;
pub const NofValidTemperatureUnits: u32 = 6;
pub const NofValidAngleUnits: u32 = 4;
pub const NofValidElectricCurrentUnits: u32 = 7;
pub const NofValidSubstanceAmountUnits: u32 = 6;
pub const NofValidLuminousIntensityUnits: u32 = 7;
pub const NofValidDataClass: u32 = 7;
pub const NofValidGridLocation: u32 = 9;
pub const NofValidBCDataTypes: u32 = 4;
pub const NofValidGridConnectivityTypes: u32 = 5;
pub const NofValidPointSetTypes: u32 = 9;
pub const NofValidGoverningEquationsTypes: u32 = 8;
pub const NofValidModelTypes: u32 = 36;
pub const NofValidBCTypes: u32 = 26;
pub const NofValidDataTypes: u32 = 7;
pub const NofValidElementTypes: u32 = 57;
pub const NPE_NODE: u32 = 1;
pub const NPE_BAR_2: u32 = 2;
pub const NPE_BAR_3: u32 = 3;
pub const NPE_TRI_3: u32 = 3;
pub const NPE_TRI_6: u32 = 6;
pub const NPE_QUAD_4: u32 = 4;
pub const NPE_QUAD_8: u32 = 8;
pub const NPE_QUAD_9: u32 = 9;
pub const NPE_TETRA_4: u32 = 4;
pub const NPE_TETRA_10: u32 = 10;
pub const NPE_PYRA_5: u32 = 5;
pub const NPE_PYRA_13: u32 = 13;
pub const NPE_PYRA_14: u32 = 14;
pub const NPE_PENTA_6: u32 = 6;
pub const NPE_PENTA_15: u32 = 15;
pub const NPE_PENTA_18: u32 = 18;
pub const NPE_HEXA_8: u32 = 8;
pub const NPE_HEXA_20: u32 = 20;
pub const NPE_HEXA_27: u32 = 27;
pub const NPE_MIXED: u32 = 0;
pub const NPE_NGON_n: u32 = 0;
pub const NPE_NFACE_n: u32 = 0;
pub const NPE_BAR_4: u32 = 4;
pub const NPE_TRI_9: u32 = 9;
pub const NPE_TRI_10: u32 = 10;
pub const NPE_QUAD_12: u32 = 12;
pub const NPE_QUAD_16: u32 = 16;
pub const NPE_TETRA_16: u32 = 16;
pub const NPE_TETRA_20: u32 = 20;
pub const NPE_PYRA_21: u32 = 21;
pub const NPE_PYRA_29: u32 = 29;
pub const NPE_PYRA_30: u32 = 30;
pub const NPE_PENTA_24: u32 = 24;
pub const NPE_PENTA_38: u32 = 38;
pub const NPE_PENTA_40: u32 = 40;
pub const NPE_HEXA_32: u32 = 32;
pub const NPE_HEXA_56: u32 = 56;
pub const NPE_HEXA_64: u32 = 64;
pub const NPE_BAR_5: u32 = 5;
pub const NPE_TRI_12: u32 = 12;
pub const NPE_TRI_15: u32 = 15;
pub const NPE_QUAD_P4_16: u32 = 16;
pub const NPE_QUAD_25: u32 = 25;
pub const NPE_TETRA_22: u32 = 22;
pub const NPE_TETRA_34: u32 = 34;
pub const NPE_TETRA_35: u32 = 35;
pub const NPE_PYRA_P4_29: u32 = 29;
pub const NPE_PYRA_50: u32 = 50;
pub const NPE_PYRA_55: u32 = 55;
pub const NPE_PENTA_33: u32 = 33;
pub const NPE_PENTA_66: u32 = 66;
pub const NPE_PENTA_75: u32 = 75;
pub const NPE_HEXA_44: u32 = 44;
pub const NPE_HEXA_98: u32 = 98;
pub const NPE_HEXA_125: u32 = 125;
pub const NofValidZoneTypes: u32 = 4;
pub const NofValidRigidGridMotionTypes: u32 = 4;
pub const NofValidArbitraryGridMotionTypes: u32 = 4;
pub const NofValidSimulationTypes: u32 = 4;
pub const NofValidWallFunctionTypes: u32 = 3;
pub const NofValidAreaTypes: u32 = 4;
pub const NofValidAverageInterfaceTypes: u32 = 8;
pub type cgsize_t = ::std::os::raw::c_int;
pub type cgerr_t = ::std::os::raw::c_int;
pub type cgint_t = ::std::os::raw::c_int;
pub type cgid_t = f64;
pub type cgint_f = ::std::os::raw::c_int;
pub type cglong_t = ::std::os::raw::c_long;
pub type cgulong_t = ::std::os::raw::c_ulong;
pub const MassUnits_t_MassUnitsNull: MassUnits_t = 0;
pub const MassUnits_t_MassUnitsUserDefined: MassUnits_t = 1;
pub const MassUnits_t_Kilogram: MassUnits_t = 2;
pub const MassUnits_t_Gram: MassUnits_t = 3;
pub const MassUnits_t_Slug: MassUnits_t = 4;
pub const MassUnits_t_PoundMass: MassUnits_t = 5;
pub type MassUnits_t = u32;
pub const LengthUnits_t_LengthUnitsNull: LengthUnits_t = 0;
pub const LengthUnits_t_LengthUnitsUserDefined: LengthUnits_t = 1;
pub const LengthUnits_t_Meter: LengthUnits_t = 2;
pub const LengthUnits_t_Centimeter: LengthUnits_t = 3;
pub const LengthUnits_t_Millimeter: LengthUnits_t = 4;
pub const LengthUnits_t_Foot: LengthUnits_t = 5;
pub const LengthUnits_t_Inch: LengthUnits_t = 6;
pub type LengthUnits_t = u32;
pub const TimeUnits_t_TimeUnitsNull: TimeUnits_t = 0;
pub const TimeUnits_t_TimeUnitsUserDefined: TimeUnits_t = 1;
pub const TimeUnits_t_Second: TimeUnits_t = 2;
pub type TimeUnits_t = u32;
pub const TemperatureUnits_t_TemperatureUnitsNull: TemperatureUnits_t = 0;
pub const TemperatureUnits_t_TemperatureUnitsUserDefined: TemperatureUnits_t = 1;
pub const TemperatureUnits_t_Kelvin: TemperatureUnits_t = 2;
pub const TemperatureUnits_t_Celsius: TemperatureUnits_t = 3;
pub const TemperatureUnits_t_Rankine: TemperatureUnits_t = 4;
pub const TemperatureUnits_t_Fahrenheit: TemperatureUnits_t = 5;
pub type TemperatureUnits_t = u32;
pub const AngleUnits_t_AngleUnitsNull: AngleUnits_t = 0;
pub const AngleUnits_t_AngleUnitsUserDefined: AngleUnits_t = 1;
pub const AngleUnits_t_Degree: AngleUnits_t = 2;
pub const AngleUnits_t_Radian: AngleUnits_t = 3;
pub type AngleUnits_t = u32;
pub const ElectricCurrentUnits_t_ElectricCurrentUnitsNull: ElectricCurrentUnits_t = 0;
pub const ElectricCurrentUnits_t_ElectricCurrentUnitsUserDefined: ElectricCurrentUnits_t = 1;
pub const ElectricCurrentUnits_t_Ampere: ElectricCurrentUnits_t = 2;
pub const ElectricCurrentUnits_t_Abampere: ElectricCurrentUnits_t = 3;
pub const ElectricCurrentUnits_t_Statampere: ElectricCurrentUnits_t = 4;
pub const ElectricCurrentUnits_t_Edison: ElectricCurrentUnits_t = 5;
pub const ElectricCurrentUnits_t_auCurrent: ElectricCurrentUnits_t = 6;
pub type ElectricCurrentUnits_t = u32;
pub const SubstanceAmountUnits_t_SubstanceAmountUnitsNull: SubstanceAmountUnits_t = 0;
pub const SubstanceAmountUnits_t_SubstanceAmountUnitsUserDefined: SubstanceAmountUnits_t = 1;
pub const SubstanceAmountUnits_t_Mole: SubstanceAmountUnits_t = 2;
pub const SubstanceAmountUnits_t_Entities: SubstanceAmountUnits_t = 3;
pub const SubstanceAmountUnits_t_StandardCubicFoot: SubstanceAmountUnits_t = 4;
pub const SubstanceAmountUnits_t_StandardCubicMeter: SubstanceAmountUnits_t = 5;
pub type SubstanceAmountUnits_t = u32;
pub const LuminousIntensityUnits_t_LuminousIntensityUnitsNull: LuminousIntensityUnits_t = 0;
pub const LuminousIntensityUnits_t_LuminousIntensityUnitsUserDefined: LuminousIntensityUnits_t = 1;
pub const LuminousIntensityUnits_t_Candela: LuminousIntensityUnits_t = 2;
pub const LuminousIntensityUnits_t_Candle: LuminousIntensityUnits_t = 3;
pub const LuminousIntensityUnits_t_Carcel: LuminousIntensityUnits_t = 4;
pub const LuminousIntensityUnits_t_Hefner: LuminousIntensityUnits_t = 5;
pub const LuminousIntensityUnits_t_Violle: LuminousIntensityUnits_t = 6;
pub type LuminousIntensityUnits_t = u32;
extern "C" {
    pub static mut MassUnitsName: [*const ::std::os::raw::c_char; 6usize];
}
extern "C" {
    pub static mut LengthUnitsName: [*const ::std::os::raw::c_char; 7usize];
}
extern "C" {
    pub static mut TimeUnitsName: [*const ::std::os::raw::c_char; 3usize];
}
extern "C" {
    pub static mut TemperatureUnitsName: [*const ::std::os::raw::c_char; 6usize];
}
extern "C" {
    pub static mut AngleUnitsName: [*const ::std::os::raw::c_char; 4usize];
}
extern "C" {
    pub static mut ElectricCurrentUnitsName: [*const ::std::os::raw::c_char; 7usize];
}
extern "C" {
    pub static mut SubstanceAmountUnitsName: [*const ::std::os::raw::c_char; 6usize];
}
extern "C" {
    pub static mut LuminousIntensityUnitsName: [*const ::std::os::raw::c_char; 7usize];
}
pub const DataClass_t_DataClassNull: DataClass_t = 0;
pub const DataClass_t_DataClassUserDefined: DataClass_t = 1;
pub const DataClass_t_Dimensional: DataClass_t = 2;
pub const DataClass_t_NormalizedByDimensional: DataClass_t = 3;
pub const DataClass_t_NormalizedByUnknownDimensional: DataClass_t = 4;
pub const DataClass_t_NondimensionalParameter: DataClass_t = 5;
pub const DataClass_t_DimensionlessConstant: DataClass_t = 6;
pub type DataClass_t = u32;
extern "C" {
    pub static mut DataClassName: [*const ::std::os::raw::c_char; 7usize];
}
pub const GridLocation_t_GridLocationNull: GridLocation_t = 0;
pub const GridLocation_t_GridLocationUserDefined: GridLocation_t = 1;
pub const GridLocation_t_Vertex: GridLocation_t = 2;
pub const GridLocation_t_CellCenter: GridLocation_t = 3;
pub const GridLocation_t_FaceCenter: GridLocation_t = 4;
pub const GridLocation_t_IFaceCenter: GridLocation_t = 5;
pub const GridLocation_t_JFaceCenter: GridLocation_t = 6;
pub const GridLocation_t_KFaceCenter: GridLocation_t = 7;
pub const GridLocation_t_EdgeCenter: GridLocation_t = 8;
pub type GridLocation_t = u32;
extern "C" {
    pub static mut GridLocationName: [*const ::std::os::raw::c_char; 9usize];
}
pub const BCDataType_t_BCDataTypeNull: BCDataType_t = 0;
pub const BCDataType_t_BCDataTypeUserDefined: BCDataType_t = 1;
pub const BCDataType_t_Dirichlet: BCDataType_t = 2;
pub const BCDataType_t_Neumann: BCDataType_t = 3;
pub type BCDataType_t = u32;
extern "C" {
    pub static mut BCDataTypeName: [*const ::std::os::raw::c_char; 4usize];
}
pub const GridConnectivityType_t_GridConnectivityTypeNull: GridConnectivityType_t = 0;
pub const GridConnectivityType_t_GridConnectivityTypeUserDefined: GridConnectivityType_t = 1;
pub const GridConnectivityType_t_Overset: GridConnectivityType_t = 2;
pub const GridConnectivityType_t_Abutting: GridConnectivityType_t = 3;
pub const GridConnectivityType_t_Abutting1to1: GridConnectivityType_t = 4;
pub type GridConnectivityType_t = u32;
extern "C" {
    pub static mut GridConnectivityTypeName: [*const ::std::os::raw::c_char; 5usize];
}
pub const PointSetType_t_PointSetTypeNull: PointSetType_t = 0;
pub const PointSetType_t_PointSetTypeUserDefined: PointSetType_t = 1;
pub const PointSetType_t_PointList: PointSetType_t = 2;
pub const PointSetType_t_PointListDonor: PointSetType_t = 3;
pub const PointSetType_t_PointRange: PointSetType_t = 4;
pub const PointSetType_t_PointRangeDonor: PointSetType_t = 5;
pub const PointSetType_t_ElementRange: PointSetType_t = 6;
pub const PointSetType_t_ElementList: PointSetType_t = 7;
pub const PointSetType_t_CellListDonor: PointSetType_t = 8;
pub type PointSetType_t = u32;
extern "C" {
    pub static mut PointSetTypeName: [*const ::std::os::raw::c_char; 9usize];
}
pub const GoverningEquationsType_t_GoverningEquationsNull: GoverningEquationsType_t = 0;
pub const GoverningEquationsType_t_GoverningEquationsUserDefined: GoverningEquationsType_t = 1;
pub const GoverningEquationsType_t_FullPotential: GoverningEquationsType_t = 2;
pub const GoverningEquationsType_t_Euler: GoverningEquationsType_t = 3;
pub const GoverningEquationsType_t_NSLaminar: GoverningEquationsType_t = 4;
pub const GoverningEquationsType_t_NSTurbulent: GoverningEquationsType_t = 5;
pub const GoverningEquationsType_t_NSLaminarIncompressible: GoverningEquationsType_t = 6;
pub const GoverningEquationsType_t_NSTurbulentIncompressible: GoverningEquationsType_t = 7;
pub type GoverningEquationsType_t = u32;
pub const ModelType_t_ModelTypeNull: ModelType_t = 0;
pub const ModelType_t_ModelTypeUserDefined: ModelType_t = 1;
pub const ModelType_t_Ideal: ModelType_t = 2;
pub const ModelType_t_VanderWaals: ModelType_t = 3;
pub const ModelType_t_Constant: ModelType_t = 4;
pub const ModelType_t_PowerLaw: ModelType_t = 5;
pub const ModelType_t_SutherlandLaw: ModelType_t = 6;
pub const ModelType_t_ConstantPrandtl: ModelType_t = 7;
pub const ModelType_t_EddyViscosity: ModelType_t = 8;
pub const ModelType_t_ReynoldsStress: ModelType_t = 9;
pub const ModelType_t_ReynoldsStressAlgebraic: ModelType_t = 10;
pub const ModelType_t_Algebraic_BaldwinLomax: ModelType_t = 11;
pub const ModelType_t_Algebraic_CebeciSmith: ModelType_t = 12;
pub const ModelType_t_HalfEquation_JohnsonKing: ModelType_t = 13;
pub const ModelType_t_OneEquation_BaldwinBarth: ModelType_t = 14;
pub const ModelType_t_OneEquation_SpalartAllmaras: ModelType_t = 15;
pub const ModelType_t_TwoEquation_JonesLaunder: ModelType_t = 16;
pub const ModelType_t_TwoEquation_MenterSST: ModelType_t = 17;
pub const ModelType_t_TwoEquation_Wilcox: ModelType_t = 18;
pub const ModelType_t_CaloricallyPerfect: ModelType_t = 19;
pub const ModelType_t_ThermallyPerfect: ModelType_t = 20;
pub const ModelType_t_ConstantDensity: ModelType_t = 21;
pub const ModelType_t_RedlichKwong: ModelType_t = 22;
pub const ModelType_t_Frozen: ModelType_t = 23;
pub const ModelType_t_ThermalEquilib: ModelType_t = 24;
pub const ModelType_t_ThermalNonequilib: ModelType_t = 25;
pub const ModelType_t_ChemicalEquilibCurveFit: ModelType_t = 26;
pub const ModelType_t_ChemicalEquilibMinimization: ModelType_t = 27;
pub const ModelType_t_ChemicalNonequilib: ModelType_t = 28;
pub const ModelType_t_EMElectricField: ModelType_t = 29;
pub const ModelType_t_EMMagneticField: ModelType_t = 30;
pub const ModelType_t_EMConductivity: ModelType_t = 31;
pub const ModelType_t_Voltage: ModelType_t = 32;
pub const ModelType_t_Interpolated: ModelType_t = 33;
pub const ModelType_t_Equilibrium_LinRessler: ModelType_t = 34;
pub const ModelType_t_Chemistry_LinRessler: ModelType_t = 35;
pub type ModelType_t = u32;
extern "C" {
    pub static mut GoverningEquationsTypeName: [*const ::std::os::raw::c_char; 8usize];
}
extern "C" {
    pub static mut ModelTypeName: [*const ::std::os::raw::c_char; 36usize];
}
pub const BCType_t_BCTypeNull: BCType_t = 0;
pub const BCType_t_BCTypeUserDefined: BCType_t = 1;
pub const BCType_t_BCAxisymmetricWedge: BCType_t = 2;
pub const BCType_t_BCDegenerateLine: BCType_t = 3;
pub const BCType_t_BCDegeneratePoint: BCType_t = 4;
pub const BCType_t_BCDirichlet: BCType_t = 5;
pub const BCType_t_BCExtrapolate: BCType_t = 6;
pub const BCType_t_BCFarfield: BCType_t = 7;
pub const BCType_t_BCGeneral: BCType_t = 8;
pub const BCType_t_BCInflow: BCType_t = 9;
pub const BCType_t_BCInflowSubsonic: BCType_t = 10;
pub const BCType_t_BCInflowSupersonic: BCType_t = 11;
pub const BCType_t_BCNeumann: BCType_t = 12;
pub const BCType_t_BCOutflow: BCType_t = 13;
pub const BCType_t_BCOutflowSubsonic: BCType_t = 14;
pub const BCType_t_BCOutflowSupersonic: BCType_t = 15;
pub const BCType_t_BCSymmetryPlane: BCType_t = 16;
pub const BCType_t_BCSymmetryPolar: BCType_t = 17;
pub const BCType_t_BCTunnelInflow: BCType_t = 18;
pub const BCType_t_BCTunnelOutflow: BCType_t = 19;
pub const BCType_t_BCWall: BCType_t = 20;
pub const BCType_t_BCWallInviscid: BCType_t = 21;
pub const BCType_t_BCWallViscous: BCType_t = 22;
pub const BCType_t_BCWallViscousHeatFlux: BCType_t = 23;
pub const BCType_t_BCWallViscousIsothermal: BCType_t = 24;
pub const BCType_t_FamilySpecified: BCType_t = 25;
pub type BCType_t = u32;
extern "C" {
    pub static mut BCTypeName: [*const ::std::os::raw::c_char; 26usize];
}
pub const DataType_t_DataTypeNull: DataType_t = 0;
pub const DataType_t_DataTypeUserDefined: DataType_t = 1;
pub const DataType_t_Integer: DataType_t = 2;
pub const DataType_t_RealSingle: DataType_t = 3;
pub const DataType_t_RealDouble: DataType_t = 4;
pub const DataType_t_Character: DataType_t = 5;
pub const DataType_t_LongInteger: DataType_t = 6;
pub type DataType_t = u32;
extern "C" {
    pub static mut DataTypeName: [*const ::std::os::raw::c_char; 7usize];
}
pub const ElementType_t_ElementTypeNull: ElementType_t = 0;
pub const ElementType_t_ElementTypeUserDefined: ElementType_t = 1;
pub const ElementType_t_NODE: ElementType_t = 2;
pub const ElementType_t_BAR_2: ElementType_t = 3;
pub const ElementType_t_BAR_3: ElementType_t = 4;
pub const ElementType_t_TRI_3: ElementType_t = 5;
pub const ElementType_t_TRI_6: ElementType_t = 6;
pub const ElementType_t_QUAD_4: ElementType_t = 7;
pub const ElementType_t_QUAD_8: ElementType_t = 8;
pub const ElementType_t_QUAD_9: ElementType_t = 9;
pub const ElementType_t_TETRA_4: ElementType_t = 10;
pub const ElementType_t_TETRA_10: ElementType_t = 11;
pub const ElementType_t_PYRA_5: ElementType_t = 12;
pub const ElementType_t_PYRA_14: ElementType_t = 13;
pub const ElementType_t_PENTA_6: ElementType_t = 14;
pub const ElementType_t_PENTA_15: ElementType_t = 15;
pub const ElementType_t_PENTA_18: ElementType_t = 16;
pub const ElementType_t_HEXA_8: ElementType_t = 17;
pub const ElementType_t_HEXA_20: ElementType_t = 18;
pub const ElementType_t_HEXA_27: ElementType_t = 19;
pub const ElementType_t_MIXED: ElementType_t = 20;
pub const ElementType_t_PYRA_13: ElementType_t = 21;
pub const ElementType_t_NGON_n: ElementType_t = 22;
pub const ElementType_t_NFACE_n: ElementType_t = 23;
pub const ElementType_t_BAR_4: ElementType_t = 24;
pub const ElementType_t_TRI_9: ElementType_t = 25;
pub const ElementType_t_TRI_10: ElementType_t = 26;
pub const ElementType_t_QUAD_12: ElementType_t = 27;
pub const ElementType_t_QUAD_16: ElementType_t = 28;
pub const ElementType_t_TETRA_16: ElementType_t = 29;
pub const ElementType_t_TETRA_20: ElementType_t = 30;
pub const ElementType_t_PYRA_21: ElementType_t = 31;
pub const ElementType_t_PYRA_29: ElementType_t = 32;
pub const ElementType_t_PYRA_30: ElementType_t = 33;
pub const ElementType_t_PENTA_24: ElementType_t = 34;
pub const ElementType_t_PENTA_38: ElementType_t = 35;
pub const ElementType_t_PENTA_40: ElementType_t = 36;
pub const ElementType_t_HEXA_32: ElementType_t = 37;
pub const ElementType_t_HEXA_56: ElementType_t = 38;
pub const ElementType_t_HEXA_64: ElementType_t = 39;
pub const ElementType_t_BAR_5: ElementType_t = 40;
pub const ElementType_t_TRI_12: ElementType_t = 41;
pub const ElementType_t_TRI_15: ElementType_t = 42;
pub const ElementType_t_QUAD_P4_16: ElementType_t = 43;
pub const ElementType_t_QUAD_25: ElementType_t = 44;
pub const ElementType_t_TETRA_22: ElementType_t = 45;
pub const ElementType_t_TETRA_34: ElementType_t = 46;
pub const ElementType_t_TETRA_35: ElementType_t = 47;
pub const ElementType_t_PYRA_P4_29: ElementType_t = 48;
pub const ElementType_t_PYRA_50: ElementType_t = 49;
pub const ElementType_t_PYRA_55: ElementType_t = 50;
pub const ElementType_t_PENTA_33: ElementType_t = 51;
pub const ElementType_t_PENTA_66: ElementType_t = 52;
pub const ElementType_t_PENTA_75: ElementType_t = 53;
pub const ElementType_t_HEXA_44: ElementType_t = 54;
pub const ElementType_t_HEXA_98: ElementType_t = 55;
pub const ElementType_t_HEXA_125: ElementType_t = 56;
pub type ElementType_t = u32;
extern "C" {
    pub static mut ElementTypeName: [*const ::std::os::raw::c_char; 57usize];
}
pub const ZoneType_t_ZoneTypeNull: ZoneType_t = 0;
pub const ZoneType_t_ZoneTypeUserDefined: ZoneType_t = 1;
pub const ZoneType_t_Structured: ZoneType_t = 2;
pub const ZoneType_t_Unstructured: ZoneType_t = 3;
pub type ZoneType_t = u32;
extern "C" {
    pub static mut ZoneTypeName: [*const ::std::os::raw::c_char; 4usize];
}
pub const RigidGridMotionType_t_RigidGridMotionTypeNull: RigidGridMotionType_t = 0;
pub const RigidGridMotionType_t_RigidGridMotionTypeUserDefined: RigidGridMotionType_t = 1;
pub const RigidGridMotionType_t_ConstantRate: RigidGridMotionType_t = 2;
pub const RigidGridMotionType_t_VariableRate: RigidGridMotionType_t = 3;
pub type RigidGridMotionType_t = u32;
extern "C" {
    pub static mut RigidGridMotionTypeName: [*const ::std::os::raw::c_char; 4usize];
}
pub const ArbitraryGridMotionType_t_ArbitraryGridMotionTypeNull: ArbitraryGridMotionType_t = 0;
pub const ArbitraryGridMotionType_t_ArbitraryGridMotionTypeUserDefined: ArbitraryGridMotionType_t =
    1;
pub const ArbitraryGridMotionType_t_NonDeformingGrid: ArbitraryGridMotionType_t = 2;
pub const ArbitraryGridMotionType_t_DeformingGrid: ArbitraryGridMotionType_t = 3;
pub type ArbitraryGridMotionType_t = u32;
extern "C" {
    pub static mut ArbitraryGridMotionTypeName: [*const ::std::os::raw::c_char; 4usize];
}
pub const SimulationType_t_SimulationTypeNull: SimulationType_t = 0;
pub const SimulationType_t_SimulationTypeUserDefined: SimulationType_t = 1;
pub const SimulationType_t_TimeAccurate: SimulationType_t = 2;
pub const SimulationType_t_NonTimeAccurate: SimulationType_t = 3;
pub type SimulationType_t = u32;
extern "C" {
    pub static mut SimulationTypeName: [*const ::std::os::raw::c_char; 4usize];
}
pub const WallFunctionType_t_WallFunctionTypeNull: WallFunctionType_t = 0;
pub const WallFunctionType_t_WallFunctionTypeUserDefined: WallFunctionType_t = 1;
pub const WallFunctionType_t_Generic: WallFunctionType_t = 2;
pub type WallFunctionType_t = u32;
pub const AreaType_t_AreaTypeNull: AreaType_t = 0;
pub const AreaType_t_AreaTypeUserDefined: AreaType_t = 1;
pub const AreaType_t_BleedArea: AreaType_t = 2;
pub const AreaType_t_CaptureArea: AreaType_t = 3;
pub type AreaType_t = u32;
extern "C" {
    pub static mut WallFunctionTypeName: [*const ::std::os::raw::c_char; 3usize];
}
extern "C" {
    pub static mut AreaTypeName: [*const ::std::os::raw::c_char; 4usize];
}
pub const AverageInterfaceType_t_AverageInterfaceTypeNull: AverageInterfaceType_t = 0;
pub const AverageInterfaceType_t_AverageInterfaceTypeUserDefined: AverageInterfaceType_t = 1;
pub const AverageInterfaceType_t_AverageAll: AverageInterfaceType_t = 2;
pub const AverageInterfaceType_t_AverageCircumferential: AverageInterfaceType_t = 3;
pub const AverageInterfaceType_t_AverageRadial: AverageInterfaceType_t = 4;
pub const AverageInterfaceType_t_AverageI: AverageInterfaceType_t = 5;
pub const AverageInterfaceType_t_AverageJ: AverageInterfaceType_t = 6;
pub const AverageInterfaceType_t_AverageK: AverageInterfaceType_t = 7;
pub type AverageInterfaceType_t = u32;
extern "C" {
    pub static mut AverageInterfaceTypeName: [*const ::std::os::raw::c_char; 8usize];
}
extern "C" {
    pub fn cg_is_cgns(
        filename: *const ::std::os::raw::c_char,
        file_type: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_open(
        filename: *const ::std::os::raw::c_char,
        mode: CG_MODE,
        fn_: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_version(fn_: ::std::os::raw::c_int, FileVersion: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_precision(
        fn_: ::std::os::raw::c_int,
        precision: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_close(fn_: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_save_as(
        fn_: ::std::os::raw::c_int,
        filename: *const ::std::os::raw::c_char,
        file_type: ::std::os::raw::c_int,
        follow_links: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_set_file_type(file_type: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_get_file_type(
        fn_: ::std::os::raw::c_int,
        file_type: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_root_id(fn_: ::std::os::raw::c_int, rootid: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_get_cgio(
        fn_: ::std::os::raw::c_int,
        cgio_num: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_configure(
        what: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_error_handler(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: *mut ::std::os::raw::c_char),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_set_compress(compress: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_get_compress(compress: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_set_path(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_add_path(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_get_name(
        nnames: ::std::os::raw::c_int,
        names: *mut *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_MassUnitsName(type_: MassUnits_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_LengthUnitsName(type_: LengthUnits_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_TimeUnitsName(type_: TimeUnits_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_TemperatureUnitsName(type_: TemperatureUnits_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_AngleUnitsName(type_: AngleUnits_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_ElectricCurrentUnitsName(
        type_: ElectricCurrentUnits_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_SubstanceAmountUnitsName(
        type_: SubstanceAmountUnits_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_LuminousIntensityUnitsName(
        type_: LuminousIntensityUnits_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_DataClassName(type_: DataClass_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_GridLocationName(type_: GridLocation_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_BCDataTypeName(type_: BCDataType_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_GridConnectivityTypeName(
        type_: GridConnectivityType_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_PointSetTypeName(type_: PointSetType_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_GoverningEquationsTypeName(
        type_: GoverningEquationsType_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_ModelTypeName(type_: ModelType_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_BCTypeName(type_: BCType_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_DataTypeName(type_: DataType_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_ElementTypeName(type_: ElementType_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_ZoneTypeName(type_: ZoneType_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_RigidGridMotionTypeName(
        type_: RigidGridMotionType_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_ArbitraryGridMotionTypeName(
        type_: ArbitraryGridMotionType_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_SimulationTypeName(type_: SimulationType_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_WallFunctionTypeName(type_: WallFunctionType_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_AreaTypeName(type_: AreaType_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_AverageInterfaceTypeName(
        type_: AverageInterfaceType_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_nbases(
        fn_: ::std::os::raw::c_int,
        nbases: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_base_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        basename: *mut ::std::os::raw::c_char,
        cell_dim: *mut ::std::os::raw::c_int,
        phys_dim: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_base_id(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        base_id: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_base_write(
        file_number: ::std::os::raw::c_int,
        basename: *const ::std::os::raw::c_char,
        cell_dim: ::std::os::raw::c_int,
        phys_dim: ::std::os::raw::c_int,
        B: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_cell_dim(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        cell_dim: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_nzones(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        nzones: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_zone_read(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        zonename: *mut ::std::os::raw::c_char,
        size: *mut cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_zone_type(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        type_: *mut ZoneType_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_zone_id(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        zone_id: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_zone_write(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        zonename: *const ::std::os::raw::c_char,
        size: *const cgsize_t,
        type_: ZoneType_t,
        Z: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_index_dim(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        index_dim: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_nfamilies(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        nfamilies: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_family_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        F: ::std::os::raw::c_int,
        family_name: *mut ::std::os::raw::c_char,
        nboco: *mut ::std::os::raw::c_int,
        ngeos: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_family_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        family_name: *const ::std::os::raw::c_char,
        F: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_nfamily_names(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        F: ::std::os::raw::c_int,
        nnames: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_family_name_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        F: ::std::os::raw::c_int,
        N: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        family: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_family_name_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        F: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        family: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_famname_read(family_name: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_famname_write(family_name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_nmultifam(nfams: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_multifam_read(
        N: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        family: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_multifam_write(
        name: *const ::std::os::raw::c_char,
        family: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_fambc_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        F: ::std::os::raw::c_int,
        BC: ::std::os::raw::c_int,
        fambc_name: *mut ::std::os::raw::c_char,
        bocotype: *mut BCType_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_fambc_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        F: ::std::os::raw::c_int,
        fambc_name: *const ::std::os::raw::c_char,
        bocotype: BCType_t,
        BC: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_geo_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        F: ::std::os::raw::c_int,
        G: ::std::os::raw::c_int,
        geo_name: *mut ::std::os::raw::c_char,
        geo_file: *mut *mut ::std::os::raw::c_char,
        CAD_name: *mut ::std::os::raw::c_char,
        npart: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_geo_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        F: ::std::os::raw::c_int,
        geo_name: *const ::std::os::raw::c_char,
        filename: *const ::std::os::raw::c_char,
        CADname: *const ::std::os::raw::c_char,
        G: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_part_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        F: ::std::os::raw::c_int,
        G: ::std::os::raw::c_int,
        P: ::std::os::raw::c_int,
        part_name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_part_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        F: ::std::os::raw::c_int,
        G: ::std::os::raw::c_int,
        part_name: *const ::std::os::raw::c_char,
        P: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_ngrids(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        ngrids: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_grid_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        G: ::std::os::raw::c_int,
        gridname: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_grid_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        zcoorname: *const ::std::os::raw::c_char,
        G: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_ncoords(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        ncoords: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_coord_info(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        C: ::std::os::raw::c_int,
        type_: *mut DataType_t,
        coordname: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_coord_read(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        coordname: *const ::std::os::raw::c_char,
        type_: DataType_t,
        rmin: *const cgsize_t,
        rmax: *const cgsize_t,
        coord: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_coord_general_read(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        coordname: *const ::std::os::raw::c_char,
        s_rmin: *const cgsize_t,
        s_rmax: *const cgsize_t,
        m_type: DataType_t,
        m_numdim: ::std::os::raw::c_int,
        m_dimvals: *const cgsize_t,
        m_rmin: *const cgsize_t,
        m_rmax: *const cgsize_t,
        coord_ptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_coord_id(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        C: ::std::os::raw::c_int,
        coord_id: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_coord_write(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        type_: DataType_t,
        coordname: *const ::std::os::raw::c_char,
        coord_ptr: *const ::std::os::raw::c_void,
        C: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_coord_partial_write(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        type_: DataType_t,
        coordname: *const ::std::os::raw::c_char,
        rmin: *const cgsize_t,
        rmax: *const cgsize_t,
        coord_ptr: *const ::std::os::raw::c_void,
        C: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_coord_general_write(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        coordname: *const ::std::os::raw::c_char,
        s_type: DataType_t,
        rmin: *const cgsize_t,
        rmax: *const cgsize_t,
        m_type: DataType_t,
        m_numdim: ::std::os::raw::c_int,
        m_dims: *const cgsize_t,
        m_rmin: *const cgsize_t,
        m_rmax: *const cgsize_t,
        coord_ptr: *const ::std::os::raw::c_void,
        C: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_nsections(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        nsections: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_section_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        SectionName: *mut ::std::os::raw::c_char,
        type_: *mut ElementType_t,
        start: *mut cgsize_t,
        end: *mut cgsize_t,
        nbndry: *mut ::std::os::raw::c_int,
        parent_flag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_elements_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        elements: *mut cgsize_t,
        parent_data: *mut cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_poly_elements_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        elements: *mut cgsize_t,
        connect_offset: *mut cgsize_t,
        parent_data: *mut cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_section_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        SectionName: *const ::std::os::raw::c_char,
        type_: ElementType_t,
        start: cgsize_t,
        end: cgsize_t,
        nbndry: ::std::os::raw::c_int,
        elements: *const cgsize_t,
        S: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_poly_section_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        SectionName: *const ::std::os::raw::c_char,
        type_: ElementType_t,
        start: cgsize_t,
        end: cgsize_t,
        nbndry: ::std::os::raw::c_int,
        elements: *const cgsize_t,
        connect_offset: *const cgsize_t,
        S: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_parent_data_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        parent_data: *const cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_npe(type_: ElementType_t, npe: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_ElementDataSize(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        ElementDataSize: *mut cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_section_partial_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        SectionName: *const ::std::os::raw::c_char,
        type_: ElementType_t,
        start: cgsize_t,
        end: cgsize_t,
        nbndry: ::std::os::raw::c_int,
        S: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_elements_partial_write(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        start: cgsize_t,
        end: cgsize_t,
        elements: *const cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_poly_elements_partial_write(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        start: cgsize_t,
        end: cgsize_t,
        elements: *const cgsize_t,
        connect_offset: *const cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_parent_data_partial_write(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        start: cgsize_t,
        end: cgsize_t,
        ParentData: *const cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_elements_partial_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        start: cgsize_t,
        end: cgsize_t,
        elements: *mut cgsize_t,
        parent_data: *mut cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_poly_elements_partial_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        start: cgsize_t,
        end: cgsize_t,
        elements: *mut cgsize_t,
        connect_offset: *mut cgsize_t,
        parent_data: *mut cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_ElementPartialSize(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        start: cgsize_t,
        end: cgsize_t,
        ElementDataSize: *mut cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_nsols(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        nsols: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_sol_info(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        solname: *mut ::std::os::raw::c_char,
        location: *mut GridLocation_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_sol_id(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        sol_id: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_sol_write(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        solname: *const ::std::os::raw::c_char,
        location: GridLocation_t,
        S: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_sol_size(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        data_dim: *mut ::std::os::raw::c_int,
        dim_vals: *mut cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_sol_ptset_info(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        ptset_type: *mut PointSetType_t,
        npnts: *mut cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_sol_ptset_read(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        pnts: *mut cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_sol_ptset_write(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        solname: *const ::std::os::raw::c_char,
        location: GridLocation_t,
        ptset_type: PointSetType_t,
        npnts: cgsize_t,
        pnts: *const cgsize_t,
        S: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_nfields(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        nfields: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_field_info(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        F: ::std::os::raw::c_int,
        type_: *mut DataType_t,
        fieldname: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_field_read(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        fieldname: *const ::std::os::raw::c_char,
        type_: DataType_t,
        rmin: *const cgsize_t,
        rmax: *const cgsize_t,
        field_ptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_field_general_read(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        fieldname: *const ::std::os::raw::c_char,
        s_rmin: *const cgsize_t,
        s_rmax: *const cgsize_t,
        m_type: DataType_t,
        m_numdim: ::std::os::raw::c_int,
        m_dimvals: *const cgsize_t,
        m_rmin: *const cgsize_t,
        m_rmax: *const cgsize_t,
        field_ptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_field_id(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        F: ::std::os::raw::c_int,
        field_id: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_field_write(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        type_: DataType_t,
        fieldname: *const ::std::os::raw::c_char,
        field_ptr: *const ::std::os::raw::c_void,
        F: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_field_partial_write(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        type_: DataType_t,
        fieldname: *const ::std::os::raw::c_char,
        rmin: *const cgsize_t,
        rmax: *const cgsize_t,
        field_ptr: *const ::std::os::raw::c_void,
        F: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_field_general_write(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        fieldname: *const ::std::os::raw::c_char,
        s_type: DataType_t,
        rmin: *const cgsize_t,
        rmax: *const cgsize_t,
        m_type: DataType_t,
        m_numdim: ::std::os::raw::c_int,
        m_dims: *const cgsize_t,
        m_rmin: *const cgsize_t,
        m_rmax: *const cgsize_t,
        field_ptr: *const ::std::os::raw::c_void,
        F: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_nsubregs(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        nsubreg: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_subreg_info(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        regname: *mut ::std::os::raw::c_char,
        dimension: *mut ::std::os::raw::c_int,
        location: *mut GridLocation_t,
        ptset_type: *mut PointSetType_t,
        npnts: *mut cgsize_t,
        bcname_len: *mut ::std::os::raw::c_int,
        gcname_len: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_subreg_ptset_read(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        pnts: *mut cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_subreg_bcname_read(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        bcname: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_subreg_gcname_read(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        S: ::std::os::raw::c_int,
        gcname: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_subreg_ptset_write(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        regname: *const ::std::os::raw::c_char,
        dimension: ::std::os::raw::c_int,
        location: GridLocation_t,
        ptset_type: PointSetType_t,
        npnts: cgsize_t,
        pnts: *const cgsize_t,
        S: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_subreg_bcname_write(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        regname: *const ::std::os::raw::c_char,
        dimension: ::std::os::raw::c_int,
        bcname: *const ::std::os::raw::c_char,
        S: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_subreg_gcname_write(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        regname: *const ::std::os::raw::c_char,
        dimension: ::std::os::raw::c_int,
        gcname: *const ::std::os::raw::c_char,
        S: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_nzconns(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        nzconns: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_zconn_read(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        C: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_zconn_write(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        C: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_zconn_get(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        C: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_zconn_set(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        C: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_nholes(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        nholes: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_hole_info(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        Ii: ::std::os::raw::c_int,
        holename: *mut ::std::os::raw::c_char,
        location: *mut GridLocation_t,
        ptset_type: *mut PointSetType_t,
        nptsets: *mut ::std::os::raw::c_int,
        npnts: *mut cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_hole_read(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        Ii: ::std::os::raw::c_int,
        pnts: *mut cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_hole_id(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        Ii: ::std::os::raw::c_int,
        hole_id: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_hole_write(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        holename: *const ::std::os::raw::c_char,
        location: GridLocation_t,
        ptset_type: PointSetType_t,
        nptsets: ::std::os::raw::c_int,
        npnts: cgsize_t,
        pnts: *const cgsize_t,
        Ii: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_nconns(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        nconns: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_conn_info(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        Ii: ::std::os::raw::c_int,
        connectname: *mut ::std::os::raw::c_char,
        location: *mut GridLocation_t,
        type_: *mut GridConnectivityType_t,
        ptset_type: *mut PointSetType_t,
        npnts: *mut cgsize_t,
        donorname: *mut ::std::os::raw::c_char,
        donor_zonetype: *mut ZoneType_t,
        donor_ptset_type: *mut PointSetType_t,
        donor_datatype: *mut DataType_t,
        ndata_donor: *mut cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_conn_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        Ii: ::std::os::raw::c_int,
        pnts: *mut cgsize_t,
        donor_datatype: DataType_t,
        donor_data: *mut cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_conn_id(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        Ii: ::std::os::raw::c_int,
        conn_id: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_conn_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        connectname: *const ::std::os::raw::c_char,
        location: GridLocation_t,
        type_: GridConnectivityType_t,
        ptset_type: PointSetType_t,
        npnts: cgsize_t,
        pnts: *const cgsize_t,
        donorname: *const ::std::os::raw::c_char,
        donor_zonetype: ZoneType_t,
        donor_ptset_type: PointSetType_t,
        donor_datatype: DataType_t,
        ndata_donor: cgsize_t,
        donor_data: *const cgsize_t,
        Ii: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_conn_write_short(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        connectname: *const ::std::os::raw::c_char,
        location: GridLocation_t,
        type_: GridConnectivityType_t,
        ptset_type: PointSetType_t,
        npnts: cgsize_t,
        pnts: *const cgsize_t,
        donorname: *const ::std::os::raw::c_char,
        Ii: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_conn_read_short(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        Ii: ::std::os::raw::c_int,
        pnts: *mut cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_n1to1(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        n1to1: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_1to1_read(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        Ii: ::std::os::raw::c_int,
        connectname: *mut ::std::os::raw::c_char,
        donorname: *mut ::std::os::raw::c_char,
        range: *mut cgsize_t,
        donor_range: *mut cgsize_t,
        transform: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_1to1_id(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        Ii: ::std::os::raw::c_int,
        one21_id: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_1to1_write(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        connectname: *const ::std::os::raw::c_char,
        donorname: *const ::std::os::raw::c_char,
        range: *const cgsize_t,
        donor_range: *const cgsize_t,
        transform: *const ::std::os::raw::c_int,
        Ii: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_n1to1_global(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        n1to1_global: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_1to1_read_global(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        connectname: *mut *mut ::std::os::raw::c_char,
        zonename: *mut *mut ::std::os::raw::c_char,
        donorname: *mut *mut ::std::os::raw::c_char,
        range: *mut *mut cgsize_t,
        donor_range: *mut *mut cgsize_t,
        transform: *mut *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_nbocos(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        nbocos: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_boco_info(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        BC: ::std::os::raw::c_int,
        boconame: *mut ::std::os::raw::c_char,
        bocotype: *mut BCType_t,
        ptset_type: *mut PointSetType_t,
        npnts: *mut cgsize_t,
        NormalIndex: *mut ::std::os::raw::c_int,
        NormalListSize: *mut cgsize_t,
        NormalDataType: *mut DataType_t,
        ndataset: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_boco_read(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        BC: ::std::os::raw::c_int,
        pnts: *mut cgsize_t,
        NormalList: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_boco_id(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        BC: ::std::os::raw::c_int,
        boco_id: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_boco_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        boconame: *const ::std::os::raw::c_char,
        bocotype: BCType_t,
        ptset_type: PointSetType_t,
        npnts: cgsize_t,
        pnts: *const cgsize_t,
        BC: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_boco_normal_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        BC: ::std::os::raw::c_int,
        NormalIndex: *const ::std::os::raw::c_int,
        NormalListFlag: ::std::os::raw::c_int,
        NormalDataType: DataType_t,
        NormalList: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_boco_gridlocation_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        BC: ::std::os::raw::c_int,
        location: *mut GridLocation_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_boco_gridlocation_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        BC: ::std::os::raw::c_int,
        location: GridLocation_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_dataset_read(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        BC: ::std::os::raw::c_int,
        DS: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        BCType: *mut BCType_t,
        DirichletFlag: *mut ::std::os::raw::c_int,
        NeumannFlag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_dataset_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        BC: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        BCType: BCType_t,
        Dset: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_bcdataset_write(
        name: *const ::std::os::raw::c_char,
        BCType: BCType_t,
        BCDataType: BCDataType_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_bcdataset_info(n_dataset: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_bcdataset_read(
        index: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        BCType: *mut BCType_t,
        DirichletFlag: *mut ::std::os::raw::c_int,
        NeumannFlag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_bcdata_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        BC: ::std::os::raw::c_int,
        Dset: ::std::os::raw::c_int,
        BCDataType: BCDataType_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_ndiscrete(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        ndiscrete: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_discrete_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        D: ::std::os::raw::c_int,
        discrete_name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_discrete_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        discrete_name: *const ::std::os::raw::c_char,
        D: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_discrete_size(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        D: ::std::os::raw::c_int,
        data_dim: *mut ::std::os::raw::c_int,
        dim_vals: *mut cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_discrete_ptset_info(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        D: ::std::os::raw::c_int,
        ptset_type: *mut PointSetType_t,
        npnts: *mut cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_discrete_ptset_read(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        D: ::std::os::raw::c_int,
        pnts: *mut cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_discrete_ptset_write(
        fn_: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        discrete_name: *const ::std::os::raw::c_char,
        location: GridLocation_t,
        ptset_type: PointSetType_t,
        npnts: cgsize_t,
        pnts: *const cgsize_t,
        D: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_n_rigid_motions(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        n_rigid_motions: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_rigid_motion_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        R: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        type_: *mut RigidGridMotionType_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_rigid_motion_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        type_: RigidGridMotionType_t,
        R: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_n_arbitrary_motions(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        n_arbitrary_motions: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_arbitrary_motion_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        A: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        type_: *mut ArbitraryGridMotionType_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_arbitrary_motion_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        amotionname: *const ::std::os::raw::c_char,
        type_: ArbitraryGridMotionType_t,
        A: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_simulation_type_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        type_: *mut SimulationType_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_simulation_type_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        type_: SimulationType_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_biter_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        bitername: *mut ::std::os::raw::c_char,
        nsteps: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_biter_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        bitername: *const ::std::os::raw::c_char,
        nsteps: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_ziter_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        zitername: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_ziter_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        zitername: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_gravity_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        gravity_vector: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_gravity_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        gravity_vector: *const f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_axisym_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        ref_point: *mut f32,
        axis: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_axisym_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        ref_point: *const f32,
        axis: *const f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_rotating_read(rot_rate: *mut f32, rot_center: *mut f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_rotating_write(rot_rate: *const f32, rot_center: *const f32)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_bc_wallfunction_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        BC: ::std::os::raw::c_int,
        WallFunctionType: *mut WallFunctionType_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_bc_wallfunction_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        BC: ::std::os::raw::c_int,
        WallFunctionType: WallFunctionType_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_bc_area_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        BC: ::std::os::raw::c_int,
        AreaType: *mut AreaType_t,
        SurfaceArea: *mut f32,
        RegionName: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_bc_area_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        BC: ::std::os::raw::c_int,
        AreaType: AreaType_t,
        SurfaceArea: f32,
        RegionName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_conn_periodic_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        Ii: ::std::os::raw::c_int,
        RotationCenter: *mut f32,
        RotationAngle: *mut f32,
        Translation: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_conn_periodic_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        Ii: ::std::os::raw::c_int,
        RotationCenter: *const f32,
        RotationAngle: *const f32,
        Translation: *const f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_1to1_periodic_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        Ii: ::std::os::raw::c_int,
        RotationCenter: *const f32,
        RotationAngle: *const f32,
        Translation: *const f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_1to1_periodic_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        Ii: ::std::os::raw::c_int,
        RotationCenter: *mut f32,
        RotationAngle: *mut f32,
        Translation: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_conn_average_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        Ii: ::std::os::raw::c_int,
        AverageInterfaceType: *mut AverageInterfaceType_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_conn_average_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        Ii: ::std::os::raw::c_int,
        AverageInterfaceType: AverageInterfaceType_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_1to1_average_write(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        Ii: ::std::os::raw::c_int,
        AverageInterfaceType: AverageInterfaceType_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_1to1_average_read(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        Z: ::std::os::raw::c_int,
        Ii: ::std::os::raw::c_int,
        AverageInterfaceType: *mut AverageInterfaceType_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_goto(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_goto_f08(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_gorel(file_number: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_gorel_f08(file_number: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_gopath(
        file_number: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_golist(
        file_number: ::std::os::raw::c_int,
        B: ::std::os::raw::c_int,
        depth: ::std::os::raw::c_int,
        label: *mut *mut ::std::os::raw::c_char,
        num: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_where(
        file_number: *mut ::std::os::raw::c_int,
        B: *mut ::std::os::raw::c_int,
        depth: *mut ::std::os::raw::c_int,
        label: *mut *mut ::std::os::raw::c_char,
        num: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_convergence_read(
        iterations: *mut ::std::os::raw::c_int,
        NormDefinitions: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_convergence_write(
        iterations: ::std::os::raw::c_int,
        NormDefinitions: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_state_read(
        StateDescription: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_state_write(StateDescription: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_equationset_read(
        EquationDimension: *mut ::std::os::raw::c_int,
        GoverningEquationsFlag: *mut ::std::os::raw::c_int,
        GasModelFlag: *mut ::std::os::raw::c_int,
        ViscosityModelFlag: *mut ::std::os::raw::c_int,
        ThermalConductivityModelFlag: *mut ::std::os::raw::c_int,
        TurbulenceClosureFlag: *mut ::std::os::raw::c_int,
        TurbulenceModelFlag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_equationset_chemistry_read(
        ThermalRelaxationFlag: *mut ::std::os::raw::c_int,
        ChemicalKineticsFlag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_equationset_elecmagn_read(
        ElecFldModelFlag: *mut ::std::os::raw::c_int,
        MagnFldModelFlag: *mut ::std::os::raw::c_int,
        ConductivityModelFlag: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_equationset_write(EquationDimension: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_governing_read(EquationsType: *mut GoverningEquationsType_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_governing_write(Equationstype: GoverningEquationsType_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_diffusion_read(diffusion_model: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_diffusion_write(
        diffusion_model: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_model_read(
        ModelLabel: *const ::std::os::raw::c_char,
        ModelType: *mut ModelType_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_model_write(
        ModelLabel: *const ::std::os::raw::c_char,
        ModelType: ModelType_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_narrays(narrays: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_array_info(
        A: ::std::os::raw::c_int,
        ArrayName: *mut ::std::os::raw::c_char,
        DataType: *mut DataType_t,
        DataDimension: *mut ::std::os::raw::c_int,
        DimensionVector: *mut cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_array_read(
        A: ::std::os::raw::c_int,
        Data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_array_read_as(
        A: ::std::os::raw::c_int,
        type_: DataType_t,
        Data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_array_general_read(
        A: ::std::os::raw::c_int,
        s_rmin: *const cgsize_t,
        s_rmax: *const cgsize_t,
        m_type: DataType_t,
        m_numdim: ::std::os::raw::c_int,
        m_dimvals: *const cgsize_t,
        m_rmin: *const cgsize_t,
        m_rmax: *const cgsize_t,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_array_write(
        ArrayName: *const ::std::os::raw::c_char,
        DataType: DataType_t,
        DataDimension: ::std::os::raw::c_int,
        DimensionVector: *const cgsize_t,
        Data: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_array_general_write(
        arrayname: *const ::std::os::raw::c_char,
        s_type: DataType_t,
        s_numdim: ::std::os::raw::c_int,
        s_dimvals: *const cgsize_t,
        s_rmin: *const cgsize_t,
        s_rmax: *const cgsize_t,
        m_type: DataType_t,
        m_numdim: ::std::os::raw::c_int,
        m_dimvals: *const cgsize_t,
        m_rmin: *const cgsize_t,
        m_rmax: *const cgsize_t,
        data: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_nuser_data(nuser_data: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_user_data_read(
        Index: ::std::os::raw::c_int,
        user_data_name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_user_data_write(
        user_data_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_nintegrals(nintegrals: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_integral_read(
        IntegralDataIndex: ::std::os::raw::c_int,
        IntegralDataName: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_integral_write(
        IntegralDataName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_rind_read(RindData: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_rind_write(RindData: *const ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_ndescriptors(ndescriptors: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_descriptor_read(
        descr_no: ::std::os::raw::c_int,
        descr_name: *mut ::std::os::raw::c_char,
        descr_text: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_descriptor_write(
        descr_name: *const ::std::os::raw::c_char,
        descr_text: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_nunits(nunits: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_units_read(
        mass: *mut MassUnits_t,
        length: *mut LengthUnits_t,
        time: *mut TimeUnits_t,
        temperature: *mut TemperatureUnits_t,
        angle: *mut AngleUnits_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_units_write(
        mass: MassUnits_t,
        length: LengthUnits_t,
        time: TimeUnits_t,
        temperature: TemperatureUnits_t,
        angle: AngleUnits_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_unitsfull_read(
        mass: *mut MassUnits_t,
        length: *mut LengthUnits_t,
        time: *mut TimeUnits_t,
        temperature: *mut TemperatureUnits_t,
        angle: *mut AngleUnits_t,
        current: *mut ElectricCurrentUnits_t,
        amount: *mut SubstanceAmountUnits_t,
        intensity: *mut LuminousIntensityUnits_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_unitsfull_write(
        mass: MassUnits_t,
        length: LengthUnits_t,
        time: TimeUnits_t,
        temperature: TemperatureUnits_t,
        angle: AngleUnits_t,
        current: ElectricCurrentUnits_t,
        amount: SubstanceAmountUnits_t,
        intensity: LuminousIntensityUnits_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_exponents_info(DataType: *mut DataType_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_nexponents(numexp: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_exponents_read(exponents: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_exponents_write(
        DataType: DataType_t,
        exponents: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_expfull_read(exponents: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_expfull_write(
        DataType: DataType_t,
        exponents: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_conversion_info(DataType: *mut DataType_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_conversion_read(
        ConversionFactors: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_conversion_write(
        DataType: DataType_t,
        ConversionFactors: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_dataclass_read(dataclass: *mut DataClass_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_dataclass_write(dataclass: DataClass_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_gridlocation_read(GridLocation: *mut GridLocation_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_gridlocation_write(GridLocation: GridLocation_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_ordinal_read(Ordinal: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_ordinal_write(Ordinal: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_ptset_info(
        ptset_type: *mut PointSetType_t,
        npnts: *mut cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_ptset_write(
        ptset_type: PointSetType_t,
        npnts: cgsize_t,
        pnts: *const cgsize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_ptset_read(pnts: *mut cgsize_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_is_link(path_length: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_link_read(
        filename: *mut *mut ::std::os::raw::c_char,
        link_path: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_link_write(
        nodename: *const ::std::os::raw::c_char,
        filename: *const ::std::os::raw::c_char,
        name_in_file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_delete_node(node_name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_free(data: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cg_get_error() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cg_error_exit();
}
extern "C" {
    pub fn cg_error_print();
}
